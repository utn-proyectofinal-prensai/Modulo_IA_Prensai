#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de prueba para la API con validaci√≥n de URLs
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import api_flask
import json

def test_api_validacion():
    """
    Prueba la API con URLs mixtas para verificar la validaci√≥n
    """
    print("üß™ Probando API con validaci√≥n de URLs...")
    
    # URLs de prueba (mixtas: v√°lidas y no v√°lidas)
    urls_prueba = [
        # URLs v√°lidas de ejes.com
        "https://www.ejes.com/noticia1",
        "http://ejes.com/noticia2",
        
        # URLs no v√°lidas
        "https://otro-sitio.com/noticia",
        "no-es-url",
        "",
        None,
        "https://ejes.org/noticia"
    ]
    
    # Par√°metros de prueba
    temas = ["Tema1", "Tema2", "Tema3"]
    menciones = ["Mencion1", "Mencion2"]
    ministro = "Ministro Test"
    ministerio = "Ministerio Test"
    
    print(f"üìã URLs de prueba ({len(urls_prueba)}):")
    for i, url in enumerate(urls_prueba):
        print(f"  {i+1:2d}. {url}")
    
    print(f"\nüîß Par√°metros:")
    print(f"  ‚Ä¢ Temas: {temas}")
    print(f"  ‚Ä¢ Menciones: {menciones}")
    print(f"  ‚Ä¢ Ministro: {ministro}")
    print(f"  ‚Ä¢ Ministerio: {ministerio}")
    
    print(f"\nüîç Ejecutando procesamiento...")
    
    # Ejecutar procesamiento (sin levantar el servidor Flask)
    resultado = api_flask.procesar_noticias_con_ia(
        urls=urls_prueba,
        temas=temas,
        menciones=menciones,
        ministro=ministro,
        ministerio=ministerio
    )
    
    # Mostrar resultados
    print(f"\nüìä Resultado de la API:")
    print(f"  ‚Ä¢ Success: {resultado['success']}")
    print(f"  ‚Ä¢ Recibidas: {resultado['recibidas']}")
    print(f"  ‚Ä¢ Procesadas: {resultado['procesadas']}")
    print(f"  ‚Ä¢ URLs no procesadas: {len(resultado['urls_no_procesadas'])}")
    
    if 'motivos_rechazo' in resultado:
        print(f"\n‚ùå Motivos de rechazo:")
        for url, motivo in resultado['motivos_rechazo'].items():
            print(f"  ‚Ä¢ {url} - {motivo}")
    
    if 'tiempo_procesamiento' in resultado:
        print(f"  ‚Ä¢ Tiempo: {resultado['tiempo_procesamiento']}")
    
    if 'noticias_procesadas' in resultado:
        print(f"  ‚Ä¢ Noticias procesadas: {resultado['noticias_procesadas']}")
    
    # Mostrar estructura de respuesta
    print(f"\nüîç Estructura de respuesta:")
    print(f"  ‚Ä¢ Campos disponibles: {list(resultado.keys())}")
    
    # Verificar que la respuesta tenga el formato esperado
    campos_esperados = [
        'success', 'recibidas', 'procesadas', 'urls_no_procesadas', 
        'motivos_rechazo', 'tiempo_procesamiento', 'noticias_procesadas', 'data'
    ]
    
    campos_faltantes = [campo for campo in campos_esperados if campo not in resultado]
    campos_extra = [campo for campo in resultado.keys() if campo not in campos_esperados]
    
    print(f"\n‚úÖ Validaci√≥n de estructura:")
    print(f"  ‚Ä¢ Campos faltantes: {campos_faltantes if campos_faltantes else 'Ninguno'}")
    print(f"  ‚Ä¢ Campos extra: {campos_extra if campos_extra else 'Ninguno'}")
    
    # Verificar que las estad√≠sticas sean consistentes
    if resultado['success']:
        recibidas = resultado['recibidas']
        procesadas = resultado['procesadas']
        no_procesadas = len(resultado['urls_no_procesadas'])
        
        print(f"\nüî¢ Verificaci√≥n de estad√≠sticas:")
        print(f"  ‚Ä¢ Recibidas: {recibidas}")
        print(f"  ‚Ä¢ Procesadas: {procesadas}")
        print(f"  ‚Ä¢ No procesadas: {no_procesadas}")
        print(f"  ‚Ä¢ Total: {procesadas + no_procesadas}")
        print(f"  ‚Ä¢ Consistente: {'‚úÖ' if (procesadas + no_procesadas) == recibidas else '‚ùå'}")
    
    print(f"\nüéØ Test completado!")
    return resultado

if __name__ == "__main__":
    test_api_validacion()
